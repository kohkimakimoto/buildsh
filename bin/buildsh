#!/usr/bin/env bash

#/ Usage: buildsh [<options...>] -- [<commands...>]
#/
#/ Convenient docker powered shell script for building, testing and deploying softwares.
#/
#/ Options:
#/     -e, --env <KEY=VALUE>      Set custom environment variables.
#/     -h, --help                 Show help.
#/     --clean                    Remove cache.
#/
#/ Examples:
#/     buildsh
#/     buildsh -- ls -la
#/
#/ Configuration:
#/     buildsh loads .buildshrc file if it is existed in your current directory.
#/     You can set custom environment to change buildsh behavior.
#/
#/ Description:
#/     Run an arbitrary command in the isolated build container.
#/     If you run a command without any options,
#/     buildsh boots the container with interactive shell (default bash).
#/
#/ See also:
#/     https://github.com/kohkimakimoto/buildsh
#/
set -e


# variables
BUILDSH_DOCKER_IMAGE="kohkimakimoto/buildsh:latest"
BUILDSH_DOCKER_OPTIONS="--rm -e TZ=Asia/Tokyo"
# this is example DinD config
# BUILDSH_DOCKER_OPTIONS="--rm -w /build -v $PWD:/build -e TZ=Asia/Tokyo --net=host  -v /var/run/docker.sock:/var/run/docker.sock"
BUILDSH_ENV=()
BUILDSH_RCFILE="$PWD/.buildshrc"
BUILDSH_HOME="$PWD"
BUILDSH_CONTAINER_HOME="/build"
BUILDSH_CONTAINER_WORKDIR="/build"
BUILDSH_CMD=""
BUILDSH_USE_CACHE=""

# internal variables
progname=$(basename $0)

# functions
abort() {
  { if [ "$#" -eq 0 ]; then cat -
    else echo "${progname} error: $*"
    fi
  } >&2
  exit 1
}

print_help() {
    local filepath="$(abs_dirname "$0")/$progname"
    grep '^#/' <"$filepath" | cut -c4-
}

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

clean_cache() {
    if [ -n "$buildsh_cachedir" ]; then
        if [ -d "$buildsh_cachedir" ]; then
            rm -rf "$buildsh_cachedir"
        fi
        mkdir -p $buildsh_cachedir
    fi
}

# utility functions for .buildshrc
use_cache() {
    BUILDSH_USE_CACHE=1
}

docker_option() {
    BUILDSH_DOCKER_OPTIONS="$BUILDSH_DOCKER_OPTIONS $1"
}

envvar() {
    BUILDSH_ENV+=( "$1" )
}

container_home() {
    BUILDSH_CONTAINER_HOME="$1"
    BUILDSH_CONTAINER_WORKDIR="$BUILDSH_CONTAINER_HOME"
}

# load rcfile
if [ -f "$BUILDSH_RCFILE" ]; then
    . $BUILDSH_RCFILE
fi

# update internal variables
buildsh_cachedir="$BUILDSH_HOME/.buildsh/cache"

# parse arguments and options.
declare -a params=()
for opt in "$@"
do
    case "$opt" in
        '-h')
            print_help
            exit 0
            ;;
        '--help')
            print_help
            exit 0
            ;;
        '--clean')
            clean_cache
            exit 0
            ;;
        '-e'|'--env' )
            if [[ -z "${2:-}" ]] || [[ "${2:-}" =~ ^-+ ]]; then
                abort "option '$1' requires an argument."
            fi
            BUILDSH_ENV+=( "$2" )
            shift 2
            ;;
        '-e='*)
            optval="${opt:3}"
            if [ -z "$optval" ]; then
                abort "option '$1' requires an argument."
            fi
            BUILDSH_ENV+=( "$optval" )
            shift 1
            ;;
        '--env='*)
            optval="${opt:6}"
            if [ -z "$optval" ]; then
                abort "option '$1' requires an argument."
            fi
            BUILDSH_ENV+=( "$optval" )
            shift 1
            ;;
        '--'|'-' )
            shift 1
            params+=( "$@" )
            break
            ;;
        -*)
            abort "illegal option -- '$(echo $1 | sed 's/^-*//')'"
            ;;
        *)
            if [[ ! -z "${1:-}" ]] && [[ ! "${1:-}" =~ ^-+ ]]; then
                params+=( "$1" )
                shift 1
            fi
            ;;
    esac
done

if [  ${#params[@]} -eq 0 ]; then
    if [ -z "$BUILDSH_CMD" ]; then
        BUILDSH_CMD="/bin/bash"
        BUILDSH_DOCKER_OPTIONS="$BUILDSH_DOCKER_OPTIONS -i -t"
    fi
else
    BUILDSH_CMD="${params[@]}"
fi

buildsh_env_options=""
if [ "${#BUILDSH_ENV[@]}" -gt 0 ]; then
    for v in "${BUILDSH_ENV[@]}"
    do
        buildsh_env_options="$buildsh_env_options -e $v"
    done
fi

buildsh_env_for_cache=""
if [ -n "$BUILDSH_USE_CACHE" ]; then
    mkdir -p $buildsh_cachedir
    buildsh_env_for_cache="-e BUILDSH_USE_CACHE=1 -e BUILDSH_CACHEDIR=$BUILDSH_CONTAINER_HOME/.buildsh/cache"
fi

docker run \
  -w $BUILDSH_CONTAINER_WORKDIR \
  -v $BUILDSH_HOME:$BUILDSH_CONTAINER_HOME \
  $BUILDSH_DOCKER_OPTIONS \
  $buildsh_env_for_cache \
  $buildsh_env_options \
  -e "BUILDSH=1" \
  -e "BUILDSH_USER=$(id -u):$(id -g)" \
  $BUILDSH_DOCKER_IMAGE \
  $BUILDSH_CMD
